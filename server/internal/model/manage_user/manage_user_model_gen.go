// Code generated by goctl. Templates Edited by jzero. DO NOT EDIT.

package manage_user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/eddieowens/opts"
	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/jzero-io/jzero-contrib/modelx"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
)

var (
	manageUserFieldNames        []string
	manageUserRows              string
	manageUserRowsExpectAutoSet string

	cacheJzeroadminManageUserIdPrefix       = "cache:jzeroadmin:manageUser:id:"
	cacheJzeroadminManageUserUsernamePrefix = "cache:jzeroadmin:manageUser:username:"
)

func initVars() {
	manageUserFieldNames = condition.RawFieldNames(&ManageUser{})
	manageUserRows = strings.Join(manageUserFieldNames, ",")
	manageUserRowsExpectAutoSet = strings.Join(condition.RemoveIgnoreColumns(manageUserFieldNames, "`id`"), ",")
}

type (
	manageUserModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *ManageUser) (sql.Result, error)
		InsertWithCache(ctx context.Context, session sqlx.Session, data *ManageUser) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id uint64) (*ManageUser, error)
		FindOneWithCache(ctx context.Context, session sqlx.Session, id uint64) (*ManageUser, error)
		FindOneByUsername(ctx context.Context, session sqlx.Session, username string) (*ManageUser, error)
		FindOneByUsernameWithCache(ctx context.Context, session sqlx.Session, username string) (*ManageUser, error)
		Update(ctx context.Context, session sqlx.Session, data *ManageUser) error
		UpdateWithCache(ctx context.Context, session sqlx.Session, data *ManageUser) error
		Delete(ctx context.Context, session sqlx.Session, id uint64) error
		DeleteWithCache(ctx context.Context, session sqlx.Session, id uint64) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, session sqlx.Session, datas []*ManageUser) error
		FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageUser, error)
		FindSelectedColumnsByCondition(ctx context.Context, session sqlx.Session, columns []string, conds ...condition.Condition) ([]*ManageUser, error)
		FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*ManageUser, error)
		CountByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (int64, error)
		PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageUser, int64, error)
		UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error
	}

	defaultManageUserModel struct {
		cachedConn sqlc.CachedConn
		conn       sqlx.SqlConn
		table      string
	}

	ManageUser struct {
		Id         uint64         `db:"id"`
		CreateTime time.Time      `db:"create_time"`
		UpdateTime time.Time      `db:"update_time"`
		CreateBy   sql.NullInt64  `db:"create_by"`
		UpdateBy   sql.NullInt64  `db:"update_by"`
		Username   string         `db:"username"`
		Password   string         `db:"password"`
		Nickname   string         `db:"nickname"`
		Gender     string         `db:"gender"`
		Phone      sql.NullString `db:"phone"`
		Status     string         `db:"status"`
		Email      sql.NullString `db:"email"`
	}
)

func newManageUserModel(conn sqlx.SqlConn, op ...opts.Opt[modelx.ModelOpts]) *defaultManageUserModel {
	o := opts.DefaultApply(op...)
	var cachedConn sqlc.CachedConn
	if len(o.CacheConf) > 0 {
		cachedConn = sqlc.NewConn(conn, o.CacheConf, o.CacheOpts...)
	}
	if o.CachedConn != nil {
		cachedConn = *o.CachedConn
	}

	initVars()

	return &defaultManageUserModel{
		cachedConn: cachedConn,
		conn:       conn,
		table:      condition.Table("`manage_user`"),
	}
}
func (m *defaultManageUserModel) Delete(ctx context.Context, session sqlx.Session, id uint64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ(condition.Field("`id`"), id))
	statement, args := sb.Build()
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *defaultManageUserModel) DeleteWithCache(ctx context.Context, session sqlx.Session, id uint64) error {
	data, err := m.FindOne(ctx, session, id)
	if err != nil {
		return err
	}

	jzeroadminManageUserIdKey := fmt.Sprintf("%s%v", cacheJzeroadminManageUserIdPrefix, id)
	jzeroadminManageUserUsernameKey := fmt.Sprintf("%s%v", cacheJzeroadminManageUserUsernamePrefix, data.Username)
	_, err = m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		sb := sqlbuilder.DeleteFrom(m.table)
		sb.Where(sb.EQ(condition.Field("`id`"), id))
		statement, args := sb.Build()
		if session != nil {
			return session.ExecCtx(ctx, statement, args...)
		}
		return conn.ExecCtx(ctx, statement, args...)
	}, jzeroadminManageUserIdKey, jzeroadminManageUserUsernameKey)
	return err
}

func (m *defaultManageUserModel) FindOne(ctx context.Context, session sqlx.Session, id uint64) (*ManageUser, error) {
	sb := sqlbuilder.Select(manageUserRows).From(m.table)
	sb.Where(sb.EQ(condition.Field("`id`"), id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp ManageUser
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageUserModel) FindOneWithCache(ctx context.Context, session sqlx.Session, id uint64) (*ManageUser, error) {
	jzeroadminManageUserIdKey := fmt.Sprintf("%s%v", cacheJzeroadminManageUserIdPrefix, id)
	var resp ManageUser
	err := m.cachedConn.QueryRowCtx(ctx, &resp, jzeroadminManageUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		sb := sqlbuilder.Select(manageUserRows).From(m.table)
		sb.Where(sb.EQ(condition.Field("`id`"), id))
		sql, args := sb.Build()
		if session != nil {
			return session.QueryRowCtx(ctx, v, sql, args...)
		}
		return conn.QueryRowCtx(ctx, v, sql, args...)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageUserModel) FindOneByUsername(ctx context.Context, session sqlx.Session, username string) (*ManageUser, error) {
	var resp ManageUser
	var err error

	sb := sqlbuilder.Select(manageUserRows).From(m.table)
	condition.SelectByWhereRawSql(sb, "`username` = ?", username)
	sb.Limit(1)

	sql, args := sb.Build()

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}

	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageUserModel) FindOneByUsernameWithCache(ctx context.Context, session sqlx.Session, username string) (*ManageUser, error) {
	jzeroadminManageUserUsernameKey := fmt.Sprintf("%s%v", cacheJzeroadminManageUserUsernamePrefix, username)
	var resp ManageUser
	err := m.cachedConn.QueryRowIndexCtx(ctx, &resp, jzeroadminManageUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		sb := sqlbuilder.Select(manageUserRows).From(m.table)
		condition.SelectByWhereRawSql(sb, "`username` = ?", username)
		sb.Limit(1)
		sql, args := sb.Build()
		var err error

		if session != nil {
			err = session.QueryRowCtx(ctx, &resp, sql, args...)
		} else {
			err = conn.QueryRowCtx(ctx, &resp, sql, args...)
		}
		if err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageUserModel) Insert(ctx context.Context, session sqlx.Session, data *ManageUser) (sql.Result, error) {
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(manageUserRowsExpectAutoSet).
		Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Username, data.Password, data.Nickname, data.Gender, data.Phone, data.Status, data.Email).Build()
	if session != nil {
		return session.ExecCtx(ctx, statement, args...)
	}
	return m.conn.ExecCtx(ctx, statement, args...)
}

func (m *defaultManageUserModel) InsertWithCache(ctx context.Context, session sqlx.Session, data *ManageUser) (sql.Result, error) {
	jzeroadminManageUserIdKey := fmt.Sprintf("%s%v", cacheJzeroadminManageUserIdPrefix, data.Id)
	jzeroadminManageUserUsernameKey := fmt.Sprintf("%s%v", cacheJzeroadminManageUserUsernamePrefix, data.Username)
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(manageUserRowsExpectAutoSet).
		Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Username, data.Password, data.Nickname, data.Gender, data.Phone, data.Status, data.Email).Build()
	return m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, statement, args...)
		}
		return conn.ExecCtx(ctx, statement, args...)
	}, jzeroadminManageUserIdKey, jzeroadminManageUserUsernameKey)
}
func (m *defaultManageUserModel) Update(ctx context.Context, session sqlx.Session, newData *ManageUser) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(manageUserRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ(condition.Field("`id`"), nil))
	statement, _ := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, newData.CreateTime, newData.UpdateTime, newData.CreateBy, newData.UpdateBy, newData.Username, newData.Password, newData.Nickname, newData.Gender, newData.Phone, newData.Status, newData.Email, newData.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, newData.CreateTime, newData.UpdateTime, newData.CreateBy, newData.UpdateBy, newData.Username, newData.Password, newData.Nickname, newData.Gender, newData.Phone, newData.Status, newData.Email, newData.Id)
	}
	return err
}

func (m *defaultManageUserModel) UpdateWithCache(ctx context.Context, session sqlx.Session, newData *ManageUser) error {
	data, err := m.FindOne(ctx, session, newData.Id)
	if err != nil {
		return err
	}
	jzeroadminManageUserIdKey := fmt.Sprintf("%s%v", cacheJzeroadminManageUserIdPrefix, data.Id)
	jzeroadminManageUserUsernameKey := fmt.Sprintf("%s%v", cacheJzeroadminManageUserUsernamePrefix, data.Username)
	_, err = m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		sb := sqlbuilder.Update(m.table)
		split := strings.Split(manageUserRowsExpectAutoSet, ",")
		var assigns []string
		for _, s := range split {
			assigns = append(assigns, sb.Assign(s, nil))
		}
		sb.Set(assigns...)
		sb.Where(sb.EQ(condition.Field("`id`"), nil))
		statement, _ := sb.Build()
		if session != nil {
			return session.ExecCtx(ctx, statement, newData.CreateTime, newData.UpdateTime, newData.CreateBy, newData.UpdateBy, newData.Username, newData.Password, newData.Nickname, newData.Gender, newData.Phone, newData.Status, newData.Email, newData.Id)
		}
		return conn.ExecCtx(ctx, statement, newData.CreateTime, newData.UpdateTime, newData.CreateBy, newData.UpdateBy, newData.Username, newData.Password, newData.Nickname, newData.Gender, newData.Phone, newData.Status, newData.Email, newData.Id)
	}, jzeroadminManageUserIdKey, jzeroadminManageUserUsernameKey)
	return err
}

func (m *defaultManageUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheJzeroadminManageUserIdPrefix, primary)
}

func (m *defaultManageUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	sb := sqlbuilder.Select(manageUserRows).From(m.table)
	sb.Where(sb.EQ(condition.Field("`id`"), primary))
	sql, args := sb.Build()
	return conn.QueryRowCtx(ctx, v, sql, args...)
}

func (m *defaultManageUserModel) tableName() string {
	return m.table
}

func (m *customManageUserModel) BulkInsert(ctx context.Context, session sqlx.Session, datas []*ManageUser) error {
	if len(datas) == 0 {
		return nil
	}

	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(manageUserRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Username, data.Password, data.Nickname, data.Gender, data.Phone, data.Status, data.Email)
	}
	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *customManageUserModel) FindSelectedColumnsByCondition(ctx context.Context, session sqlx.Session, columns []string, conds ...condition.Condition) ([]*ManageUser, error) {
	sb := sqlbuilder.Select(columns...).From(m.table)
	builder := condition.Select(*sb, conds...)
	statement, args := builder.Build()

	var resp []*ManageUser
	var err error

	if session != nil {
		err = session.QueryRowsPartialCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsPartialCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customManageUserModel) FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageUser, error) {
	return m.FindSelectedColumnsByCondition(ctx, session, manageUserFieldNames, conds...)
}

func (m *customManageUserModel) CountByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (int64, error) {
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	countBuilder := condition.Select(*countsb, countConds...)

	var (
		total int64
		err   error
	)
	statement, args := countBuilder.Build()
	if session != nil {
		err = session.QueryRowCtx(ctx, &total, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &total, statement, args...)
	}
	if err != nil {
		return 0, err
	}
	return total, nil
}

func (m *customManageUserModel) FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*ManageUser, error) {
	sb := sqlbuilder.Select(manageUserFieldNames...).From(m.table)

	builder := condition.Select(*sb, conds...)
	builder.Limit(1)
	statement, args := builder.Build()

	var resp ManageUser
	var err error

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customManageUserModel) PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageUser, int64, error) {
	sb := sqlbuilder.Select(manageUserFieldNames...).From(m.table)
	builder := condition.Select(*sb, conds...)

	var resp []*ManageUser
	var err error

	statement, args := builder.Build()

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	total, err := m.CountByCondition(ctx, session, conds...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customManageUserModel) UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	builder := condition.Update(*sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	builder.Set(assigns...)

	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *customManageUserModel) DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	builder := condition.Delete(*sb, conds...)
	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}
