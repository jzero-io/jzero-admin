// Code generated by goctl. Templates Edited by jzero. DO NOT EDIT.

package manage_role

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/eddieowens/opts"
	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero/core/stores/condition"
	"github.com/jzero-io/jzero/core/stores/modelx"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
)

var (
	manageRoleFieldNames        []string
	manageRoleRows              string
	manageRoleRowsExpectAutoSet string

	ManageRoleField = struct {
		Id         condition.Field
		Uuid       condition.Field
		CreateTime condition.Field
		UpdateTime condition.Field
		Name       condition.Field
		Status     condition.Field
		Code       condition.Field
		Desc       condition.Field
	}{
		Id:         "id",
		Uuid:       "uuid",
		CreateTime: "create_time",
		UpdateTime: "update_time",
		Name:       "name",
		Status:     "status",
		Code:       "code",
		Desc:       "desc",
	}
)

// Deprecated use ManageRoleField instead
const (
	Id         condition.Field = "id"
	Uuid       condition.Field = "uuid"
	CreateTime condition.Field = "create_time"
	UpdateTime condition.Field = "update_time"
	Name       condition.Field = "name"
	Status     condition.Field = "status"
	Code       condition.Field = "code"
	Desc       condition.Field = "desc"
)

func initManageRoleVars(flavor sqlbuilder.Flavor) {
	manageRoleFieldNames = condition.RawFieldNamesWithFlavor(flavor, &ManageRole{})
	manageRoleRows = strings.Join(manageRoleFieldNames, ",")
	manageRoleRowsExpectAutoSet = strings.Join(condition.RemoveIgnoreColumnsWithFlavor(flavor, manageRoleFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
}

type (
	manageRoleModel interface {
		// Insert insert a new record into the database.
		// Deprecated: use InsertV2 instead.
		Insert(ctx context.Context, session sqlx.Session, data *ManageRole) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*ManageRole, error)
		FindOneByUuid(ctx context.Context, session sqlx.Session, uuid string) (*ManageRole, error)
		Update(ctx context.Context, session sqlx.Session, data *ManageRole) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error

		// custom interface generated by jzero
		WithTable(f func(table string) string) manageRoleModel
		InsertV2(ctx context.Context, session sqlx.Session, data *ManageRole) error
		BulkInsert(ctx context.Context, session sqlx.Session, datas []*ManageRole) error
		FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageRole, error)
		FindSelectedColumnsByCondition(ctx context.Context, session sqlx.Session, columns []string, conds ...condition.Condition) ([]*ManageRole, error)
		FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*ManageRole, error)
		CountByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (int64, error)
		PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageRole, int64, error)
		UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error
	}

	defaultManageRoleModel struct {
		cachedConn sqlc.CachedConn
		conn       sqlx.SqlConn
		flavor     sqlbuilder.Flavor
		table      string
	}

	ManageRole struct {
		Id         int64     `db:"id"`
		Uuid       string    `db:"uuid"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Name       string    `db:"name"`
		Status     string    `db:"status"`
		Code       string    `db:"code"`
		Desc       string    `db:"desc"`
	}
)

func newManageRoleModel(conn sqlx.SqlConn, op ...opts.Opt[modelx.ModelOpts]) *defaultManageRoleModel {
	o := opts.DefaultApply(op...)
	var cachedConn sqlc.CachedConn
	if len(o.CacheConf) > 0 {
		cachedConn = sqlc.NewConn(conn, o.CacheConf, o.CacheOpts...)
	}
	if o.CachedConn != nil {
		cachedConn = *o.CachedConn
	}

	initManageRoleVars(o.Flavor)

	return &defaultManageRoleModel{
		cachedConn: cachedConn,
		conn:       conn,
		flavor:     o.Flavor,
		table:      condition.QuoteWithFlavor(o.Flavor, "`manage_role`"),
	}
}

func (m *defaultManageRoleModel) clone() *defaultManageRoleModel {
	return &defaultManageRoleModel{
		cachedConn: m.cachedConn,
		conn:       m.conn,
		table:      m.table,
		flavor:     m.flavor,
	}
}

func (m *defaultManageRoleModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ(condition.QuoteWithFlavor(m.flavor, "`id`"), id))
	statement, args := sb.BuildWithFlavor(m.flavor)
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *defaultManageRoleModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*ManageRole, error) {
	sb := sqlbuilder.Select(manageRoleRows).From(m.table)
	sb.Where(sb.EQ(condition.QuoteWithFlavor(m.flavor, "`id`"), id))
	sb.Limit(1)
	sql, args := sb.BuildWithFlavor(m.flavor)
	var resp ManageRole
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageRoleModel) FindOneByUuid(ctx context.Context, session sqlx.Session, uuid string) (*ManageRole, error) {
	var resp ManageRole
	var err error

	sb := sqlbuilder.Select(manageRoleRows).From(m.table)
	condition.SelectByWhereRawSql(sb, "`uuid` = ?", uuid)
	sb.Limit(1)

	sql, args := sb.BuildWithFlavor(m.flavor)

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}

	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageRoleModel) Insert(ctx context.Context, session sqlx.Session, data *ManageRole) (sql.Result, error) {
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(manageRoleRowsExpectAutoSet).
		Values(data.Uuid, data.Name, data.Status, data.Code, data.Desc).BuildWithFlavor(m.flavor)
	if session != nil {
		return session.ExecCtx(ctx, statement, args...)
	}
	return m.conn.ExecCtx(ctx, statement, args...)
}

func (m *defaultManageRoleModel) InsertV2(ctx context.Context, session sqlx.Session, data *ManageRole) error {
	var statement string
	var args []any
	if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
		statement, args = sqlbuilder.NewInsertBuilder().
			InsertInto(m.table).
			Cols(manageRoleRowsExpectAutoSet).
			Values(data.Uuid, data.Name, data.Status, data.Code, data.Desc).Returning("id").BuildWithFlavor(m.flavor)
	} else {
		statement, args = sqlbuilder.NewInsertBuilder().
			InsertInto(m.table).
			Cols(manageRoleRowsExpectAutoSet).
			Values(data.Uuid, data.Name, data.Status, data.Code, data.Desc).BuildWithFlavor(m.flavor)
	}
	var primaryKey int64
	var err error
	if session != nil {
		if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
			err = session.QueryRowCtx(ctx, &primaryKey, statement, args...)
			if err != nil {
				return err
			}
		} else {
			result, err := session.ExecCtx(ctx, statement, args...)
			if err != nil {
				return err
			}
			lastInsertId, err := result.LastInsertId()
			if err != nil {
				return err
			}
			primaryKey = int64(lastInsertId)
		}
	} else {
		if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
			err = m.conn.QueryRowCtx(ctx, &primaryKey, statement, args...)
		} else {
			result, err := m.conn.ExecCtx(ctx, statement, args...)
			if err != nil {
				return err
			}
			lastInsertId, err := result.LastInsertId()
			if err != nil {
				return err
			}
			primaryKey = int64(lastInsertId)
		}
	}
	data.Id = primaryKey
	return err
}

func (m *defaultManageRoleModel) Update(ctx context.Context, session sqlx.Session, newData *ManageRole) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(manageRoleRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		if condition.Unquote(s) == condition.Unquote("`id`") {
			continue
		}
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ(condition.QuoteWithFlavor(m.flavor, "`id`"), nil))
	statement, _ := sb.BuildWithFlavor(m.flavor)

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, newData.Uuid, newData.Name, newData.Status, newData.Code, newData.Desc, newData.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, newData.Uuid, newData.Name, newData.Status, newData.Code, newData.Desc, newData.Id)
	}
	return err
}

func (m *defaultManageRoleModel) withTableColumns(columns ...string) []string {
	var withTableColumns []string
	for _, col := range columns {
		if strings.Contains(col, ".") {
			withTableColumns = append(withTableColumns, condition.QuoteWithFlavor(m.flavor, col))
		} else {
			withTableColumns = append(withTableColumns, m.table+"."+condition.QuoteWithFlavor(m.flavor, col))
		}
	}
	return withTableColumns
}
func (m *customManageRoleModel) WithTable(f func(table string) string) manageRoleModel {
	mc := &customManageRoleModel{
		defaultManageRoleModel: m.clone(),
	}
	mc.table = condition.QuoteWithFlavor(m.flavor, f(m.table))
	return mc
}

func (m *customManageRoleModel) BulkInsert(ctx context.Context, session sqlx.Session, datas []*ManageRole) error {
	if len(datas) == 0 {
		return nil
	}

	sb := sqlbuilder.InsertInto(m.table)
	sb.SetFlavor(m.flavor)
	sb.Cols(manageRoleRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.Uuid, data.Name, data.Status, data.Code, data.Desc)
	}
	statement, args := sb.BuildWithFlavor(m.flavor)

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *customManageRoleModel) FindSelectedColumnsByCondition(ctx context.Context, session sqlx.Session, columns []string, conds ...condition.Condition) ([]*ManageRole, error) {
	if len(columns) == 0 {
		columns = manageRoleFieldNames
	}
	sb := sqlbuilder.Select(m.withTableColumns(columns...)...).From(m.table)
	builder := condition.SelectWithFlavor(m.flavor, *sb, conds...)
	statement, args := builder.BuildWithFlavor(m.flavor)

	var resp []*ManageRole
	var err error

	if session != nil {
		err = session.QueryRowsPartialCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsPartialCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customManageRoleModel) FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageRole, error) {
	return m.FindSelectedColumnsByCondition(ctx, session, manageRoleFieldNames, conds...)
}

func (m *customManageRoleModel) CountByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (int64, error) {
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset && cond.Operator != condition.OrderBy {
			countConds = append(countConds, cond)
		}
	}
	countBuilder := condition.SelectWithFlavor(m.flavor, *countsb, countConds...)

	var (
		total int64
		err   error
	)
	statement, args := countBuilder.BuildWithFlavor(m.flavor)
	if session != nil {
		err = session.QueryRowCtx(ctx, &total, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &total, statement, args...)
	}
	if err != nil {
		return 0, err
	}
	return total, nil
}

func (m *customManageRoleModel) FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*ManageRole, error) {
	sb := sqlbuilder.Select(m.withTableColumns(manageRoleFieldNames...)...).From(m.table)

	builder := condition.SelectWithFlavor(m.flavor, *sb, conds...)
	builder.Limit(1)
	statement, args := builder.BuildWithFlavor(m.flavor)

	var resp ManageRole
	var err error

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customManageRoleModel) PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageRole, int64, error) {
	sb := sqlbuilder.Select(m.withTableColumns(manageRoleFieldNames...)...).From(m.table)
	builder := condition.SelectWithFlavor(m.flavor, *sb, conds...)

	var resp []*ManageRole
	var err error

	statement, args := builder.BuildWithFlavor(m.flavor)

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	total, err := m.CountByCondition(ctx, session, conds...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customManageRoleModel) UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	builder := condition.UpdateWithFlavor(m.flavor, *sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	builder.Set(assigns...)

	statement, args := builder.BuildWithFlavor(m.flavor)

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *customManageRoleModel) DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	builder := condition.DeleteWithFlavor(m.flavor, *sb, conds...)
	statement, args := builder.BuildWithFlavor(m.flavor)

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}
