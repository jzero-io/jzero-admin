// Code generated by goctl. DO NOT EDIT.

package system_user_role

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/eddieowens/opts"
	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/jzero-io/jzero-contrib/modelx"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemUserRoleFieldNames          = builder.RawFieldNames(&SystemUserRole{})
	systemUserRoleRows                = strings.Join(systemUserRoleFieldNames, ",")
	systemUserRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(systemUserRoleFieldNames, "`id`"), ",")
	systemUserRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(systemUserRoleFieldNames, "`id`"), "=?,") + "=?"

	cacheSystemUserRoleIdPrefix = "jzero-admin:cache:systemUserRole:id:"
)

type (
	systemUserRoleModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *SystemUserRole) (sql.Result, error)
		InsertWithCache(ctx context.Context, session sqlx.Session, data *SystemUserRole) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id uint64) (*SystemUserRole, error)
		FindOneWithCache(ctx context.Context, session sqlx.Session, id uint64) (*SystemUserRole, error)
		Update(ctx context.Context, session sqlx.Session, data *SystemUserRole) error
		UpdateWithCache(ctx context.Context, session sqlx.Session, data *SystemUserRole) error
		Delete(ctx context.Context, session sqlx.Session, id uint64) error
		DeleteWithCache(ctx context.Context, session sqlx.Session, id uint64) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, session sqlx.Session, datas []*SystemUserRole) error
		FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*SystemUserRole, error)
		FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*SystemUserRole, error)
		PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*SystemUserRole, int64, error)
		UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error
	}

	defaultSystemUserRoleModel struct {
		cachedConn sqlc.CachedConn
		conn       sqlx.SqlConn
		table      string
	}

	SystemUserRole struct {
		Id         uint64        `db:"id"`
		CreateTime time.Time     `db:"create_time"`
		UpdateTime time.Time     `db:"update_time"`
		CreateBy   sql.NullInt64 `db:"create_by"`
		UpdateBy   sql.NullInt64 `db:"update_by"`
		UserId     int64         `db:"user_id"`
		RoleId     int64         `db:"role_id"`
	}
)

func newSystemUserRoleModel(conn sqlx.SqlConn, op ...opts.Opt[modelx.ModelOpts]) *defaultSystemUserRoleModel {
	o := opts.DefaultApply(op...)
	var cachedConn sqlc.CachedConn
	if len(o.CacheConf) > 0 {
		cachedConn = sqlc.NewConn(conn, o.CacheConf, o.CacheOpts...)
	}
	if o.CachedConn != nil {
		cachedConn = *o.CachedConn
	}
	return &defaultSystemUserRoleModel{
		cachedConn: cachedConn,
		conn:       conn,
		table:      "`system_user_role`",
	}
}
func (m *defaultSystemUserRoleModel) Delete(ctx context.Context, session sqlx.Session, id uint64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`id`", id))
	statement, args := sb.Build()
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *defaultSystemUserRoleModel) DeleteWithCache(ctx context.Context, session sqlx.Session, id uint64) error {
	systemUserRoleIdKey := fmt.Sprintf("%s%v", cacheSystemUserRoleIdPrefix, id)
	_, err := m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		sb := sqlbuilder.DeleteFrom(m.table)
		sb.Where(sb.EQ("`id`", id))
		statement, args := sb.Build()
		if session != nil {
			return session.ExecCtx(ctx, statement, args...)
		}
		return conn.ExecCtx(ctx, statement, args...)
	}, systemUserRoleIdKey)
	return err
}

func (m *defaultSystemUserRoleModel) FindOne(ctx context.Context, session sqlx.Session, id uint64) (*SystemUserRole, error) {
	sb := sqlbuilder.Select(systemUserRoleRows).From(m.table)
	sb.Where(sb.EQ("`id`", id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp SystemUserRole
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemUserRoleModel) FindOneWithCache(ctx context.Context, session sqlx.Session, id uint64) (*SystemUserRole, error) {
	systemUserRoleIdKey := fmt.Sprintf("%s%v", cacheSystemUserRoleIdPrefix, id)
	var resp SystemUserRole
	err := m.cachedConn.QueryRowCtx(ctx, &resp, systemUserRoleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		sb := sqlbuilder.Select(systemUserRoleRows).From(m.table)
		sb.Where(sb.EQ("`id`", id))
		sql, args := sb.Build()
		if session != nil {
			return session.QueryRowCtx(ctx, v, sql, args...)
		}
		return conn.QueryRowCtx(ctx, v, sql, args...)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemUserRoleModel) Insert(ctx context.Context, session sqlx.Session, data *SystemUserRole) (sql.Result, error) {
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(systemUserRoleRowsExpectAutoSet).
		Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.UserId, data.RoleId).Build()
	if session != nil {
		return session.ExecCtx(ctx, statement, args...)
	}
	return m.conn.ExecCtx(ctx, statement, args...)
}

func (m *defaultSystemUserRoleModel) InsertWithCache(ctx context.Context, session sqlx.Session, data *SystemUserRole) (sql.Result, error) {
	systemUserRoleIdKey := fmt.Sprintf("%s%v", cacheSystemUserRoleIdPrefix, data.Id)
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(systemUserRoleRowsExpectAutoSet).
		Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.UserId, data.RoleId).Build()
	return m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, statement, args...)
		}
		return conn.ExecCtx(ctx, statement, args...)
	}, systemUserRoleIdKey)
}
func (m *defaultSystemUserRoleModel) Update(ctx context.Context, session sqlx.Session, data *SystemUserRole) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(systemUserRoleRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`id`", nil))
	statement, _ := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.UserId, data.RoleId, data.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.UserId, data.RoleId, data.Id)
	}
	return err
}

func (m *defaultSystemUserRoleModel) UpdateWithCache(ctx context.Context, session sqlx.Session, data *SystemUserRole) error {
	systemUserRoleIdKey := fmt.Sprintf("%s%v", cacheSystemUserRoleIdPrefix, data.Id)
	_, err := m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		sb := sqlbuilder.Update(m.table)
		split := strings.Split(systemUserRoleRowsExpectAutoSet, ",")
		var assigns []string
		for _, s := range split {
			assigns = append(assigns, sb.Assign(s, nil))
		}
		sb.Set(assigns...)
		sb.Where(sb.EQ("`id`", nil))
		statement, _ := sb.Build()
		if session != nil {
			return session.ExecCtx(ctx, statement, data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.UserId, data.RoleId, data.Id)
		}
		return conn.ExecCtx(ctx, statement, data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.UserId, data.RoleId, data.Id)
	}, systemUserRoleIdKey)
	return err
}

func (m *defaultSystemUserRoleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSystemUserRoleIdPrefix, primary)
}

func (m *defaultSystemUserRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	sb := sqlbuilder.Select(systemUserRoleRows).From(m.table)
	sb.Where(sb.EQ("`id`", primary))
	sql, args := sb.Build()
	return conn.QueryRowCtx(ctx, v, sql, args...)
}

func (m *defaultSystemUserRoleModel) tableName() string {
	return m.table
}

func (m *customSystemUserRoleModel) BulkInsert(ctx context.Context, session sqlx.Session, datas []*SystemUserRole) error {
	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(systemUserRoleRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.UserId, data.RoleId)
	}
	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *customSystemUserRoleModel) FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*SystemUserRole, error) {
	sb := sqlbuilder.Select(systemUserRoleFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	statement, args := sb.Build()

	var resp []*SystemUserRole
	var err error

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customSystemUserRoleModel) FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*SystemUserRole, error) {
	sb := sqlbuilder.Select(systemUserRoleFieldNames...).From(m.table)

	condition.ApplySelect(sb, conds...)
	sb.Limit(1)
	statement, args := sb.Build()

	var resp SystemUserRole
	var err error

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customSystemUserRoleModel) PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*SystemUserRole, int64, error) {
	sb := sqlbuilder.Select(systemUserRoleFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	condition.ApplySelect(sb, conds...)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	condition.ApplySelect(countsb, countConds...)

	var resp []*SystemUserRole
	var err error

	statement, args := sb.Build()

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	var total int64
	statement, args = countsb.Build()
	if session != nil {
		err = session.QueryRowCtx(ctx, &total, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &total, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customSystemUserRoleModel) UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	condition.ApplyUpdate(sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	sb.Set(assigns...)

	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *customSystemUserRoleModel) DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	condition.ApplyDelete(sb, conds...)
	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}
