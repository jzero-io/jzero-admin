// Code generated by goctl. Templates Edited by jzero. DO NOT EDIT.

package manage_menu

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/eddieowens/opts"
	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero/core/stores/condition"
	"github.com/jzero-io/jzero/core/stores/modelx"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
)

var (
	manageMenuFieldNames        []string
	manageMenuRows              string
	manageMenuRowsExpectAutoSet string
)

const (
	Id              condition.Field = "id"
	CreateTime      condition.Field = "create_time"
	UpdateTime      condition.Field = "update_time"
	CreateBy        condition.Field = "create_by"
	UpdateBy        condition.Field = "update_by"
	Status          condition.Field = "status"
	ParentId        condition.Field = "parent_id"
	MenuType        condition.Field = "menu_type"
	MenuName        condition.Field = "menu_name"
	HideInMenu      condition.Field = "hide_in_menu"
	ActiveMenu      condition.Field = "active_menu"
	Order           condition.Field = "order"
	RouteName       condition.Field = "route_name"
	RoutePath       condition.Field = "route_path"
	Component       condition.Field = "component"
	Icon            condition.Field = "icon"
	IconType        condition.Field = "icon_type"
	I18nKey         condition.Field = "i18n_key"
	KeepAlive       condition.Field = "keep_alive"
	Href            condition.Field = "href"
	MultiTab        condition.Field = "multi_tab"
	FixedIndexInTab condition.Field = "fixed_index_in_tab"
	Query           condition.Field = "query"
	Permissions     condition.Field = "permissions"
	Constant        condition.Field = "constant"
	ButtonCode      condition.Field = "button_code"
)

func initVars() {
	manageMenuFieldNames = condition.RawFieldNames(&ManageMenu{})
	manageMenuRows = strings.Join(manageMenuFieldNames, ",")
	manageMenuRowsExpectAutoSet = strings.Join(condition.RemoveIgnoreColumns(manageMenuFieldNames, "`id`"), ",")
}

type (
	manageMenuModel interface {
		// Insert insert a new record into the database.
		// Deprecated: use InsertV2 instead.
		Insert(ctx context.Context, session sqlx.Session, data *ManageMenu) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id uint64) (*ManageMenu, error)
		Update(ctx context.Context, session sqlx.Session, data *ManageMenu) error
		Delete(ctx context.Context, session sqlx.Session, id uint64) error

		// custom interface generated by jzero
		InsertV2(ctx context.Context, session sqlx.Session, data *ManageMenu) error
		BulkInsert(ctx context.Context, session sqlx.Session, datas []*ManageMenu) error
		FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageMenu, error)
		FindSelectedColumnsByCondition(ctx context.Context, session sqlx.Session, columns []string, conds ...condition.Condition) ([]*ManageMenu, error)
		FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*ManageMenu, error)
		CountByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (int64, error)
		PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageMenu, int64, error)
		UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error
	}

	defaultManageMenuModel struct {
		cachedConn sqlc.CachedConn
		conn       sqlx.SqlConn
		table      string
	}

	ManageMenu struct {
		Id              uint64         `db:"id"`
		CreateTime      time.Time      `db:"create_time"`
		UpdateTime      time.Time      `db:"update_time"`
		CreateBy        sql.NullInt64  `db:"create_by"`
		UpdateBy        sql.NullInt64  `db:"update_by"`
		Status          string         `db:"status"`
		ParentId        int64          `db:"parent_id"`
		MenuType        string         `db:"menu_type"`
		MenuName        string         `db:"menu_name"`
		HideInMenu      int64          `db:"hide_in_menu"`
		ActiveMenu      sql.NullString `db:"active_menu"`
		Order           int64          `db:"order"`
		RouteName       string         `db:"route_name"`
		RoutePath       string         `db:"route_path"`
		Component       string         `db:"component"`
		Icon            string         `db:"icon"`
		IconType        string         `db:"icon_type"`
		I18nKey         string         `db:"i18n_key"`
		KeepAlive       int64          `db:"keep_alive"`
		Href            sql.NullString `db:"href"`
		MultiTab        sql.NullInt64  `db:"multi_tab"`
		FixedIndexInTab sql.NullInt64  `db:"fixed_index_in_tab"`
		Query           sql.NullString `db:"query"`
		Permissions     sql.NullString `db:"permissions"`
		Constant        int64          `db:"constant"`
		ButtonCode      sql.NullString `db:"button_code"`
	}
)

func newManageMenuModel(conn sqlx.SqlConn, op ...opts.Opt[modelx.ModelOpts]) *defaultManageMenuModel {
	o := opts.DefaultApply(op...)
	var cachedConn sqlc.CachedConn
	if len(o.CacheConf) > 0 {
		cachedConn = sqlc.NewConn(conn, o.CacheConf, o.CacheOpts...)
	}
	if o.CachedConn != nil {
		cachedConn = *o.CachedConn
	}

	initVars()

	var table string
	if o.TableName == "" {
		table = condition.AdaptTable("`manage_menu`")
	} else {
		table = condition.AdaptTable(o.TableName)
	}

	return &defaultManageMenuModel{
		cachedConn: cachedConn,
		conn:       conn,
		table:      table,
	}
}

func (m *defaultManageMenuModel) Delete(ctx context.Context, session sqlx.Session, id uint64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ(condition.AdaptField("`id`"), id))
	statement, args := sb.Build()
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *defaultManageMenuModel) FindOne(ctx context.Context, session sqlx.Session, id uint64) (*ManageMenu, error) {
	sb := sqlbuilder.Select(manageMenuRows).From(m.table)
	sb.Where(sb.EQ(condition.AdaptField("`id`"), id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp ManageMenu
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageMenuModel) Insert(ctx context.Context, session sqlx.Session, data *ManageMenu) (sql.Result, error) {
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(manageMenuRowsExpectAutoSet).
		Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode).Build()
	if session != nil {
		return session.ExecCtx(ctx, statement, args...)
	}
	return m.conn.ExecCtx(ctx, statement, args...)
}

func (m *defaultManageMenuModel) InsertV2(ctx context.Context, session sqlx.Session, data *ManageMenu) error {
	var statement string
	var args []any
	if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
		statement, args = sqlbuilder.NewInsertBuilder().
			InsertInto(m.table).
			Cols(manageMenuRowsExpectAutoSet).
			Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode).Returning("id").Build()
	} else {
		statement, args = sqlbuilder.NewInsertBuilder().
			InsertInto(m.table).
			Cols(manageMenuRowsExpectAutoSet).
			Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode).Build()
	}
	var primaryKey uint64
	var err error
	if session != nil {
		if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
			err = session.QueryRowCtx(ctx, &primaryKey, statement, args...)
			if err != nil {
				return err
			}
		} else {
			result, err := session.ExecCtx(ctx, statement, args...)
			if err != nil {
				return err
			}
			lastInsertId, err := result.LastInsertId()
			if err != nil {
				return err
			}
			primaryKey = uint64(lastInsertId)
		}
	} else {
		if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
			err = m.conn.QueryRowCtx(ctx, &primaryKey, statement, args...)
		} else {
			result, err := m.conn.ExecCtx(ctx, statement, args...)
			if err != nil {
				return err
			}
			lastInsertId, err := result.LastInsertId()
			if err != nil {
				return err
			}
			primaryKey = uint64(lastInsertId)
		}
	}
	data.Id = primaryKey
	return err
}

func (m *defaultManageMenuModel) Update(ctx context.Context, session sqlx.Session, data *ManageMenu) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(manageMenuRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ(condition.AdaptField("`id`"), nil))
	statement, _ := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode, data.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode, data.Id)
	}
	return err
}

func (m *defaultManageMenuModel) TableName() string {
	return m.table
}

func (m *defaultManageMenuModel) withTableColumns(columns ...string) []string {
	var withTableColumns []string
	for _, col := range columns {
		if strings.Contains(col, ".") {
			withTableColumns = append(withTableColumns, col)
		} else {
			withTableColumns = append(withTableColumns, m.table+"."+col)
		}
	}
	return withTableColumns
}
func (m *customManageMenuModel) BulkInsert(ctx context.Context, session sqlx.Session, datas []*ManageMenu) error {
	if len(datas) == 0 {
		return nil
	}

	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(manageMenuRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode)
	}
	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *customManageMenuModel) FindSelectedColumnsByCondition(ctx context.Context, session sqlx.Session, columns []string, conds ...condition.Condition) ([]*ManageMenu, error) {
	if len(columns) == 0 {
		columns = manageMenuFieldNames
	}
	sb := sqlbuilder.Select(m.withTableColumns(columns...)...).From(m.table)
	builder := condition.Select(*sb, conds...)
	statement, args := builder.Build()

	var resp []*ManageMenu
	var err error

	if session != nil {
		err = session.QueryRowsPartialCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsPartialCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customManageMenuModel) FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageMenu, error) {
	return m.FindSelectedColumnsByCondition(ctx, session, manageMenuFieldNames, conds...)
}

func (m *customManageMenuModel) CountByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (int64, error) {
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset && cond.Operator != condition.OrderBy {
			countConds = append(countConds, cond)
		}
	}
	countBuilder := condition.Select(*countsb, countConds...)

	var (
		total int64
		err   error
	)
	statement, args := countBuilder.Build()
	if session != nil {
		err = session.QueryRowCtx(ctx, &total, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &total, statement, args...)
	}
	if err != nil {
		return 0, err
	}
	return total, nil
}

func (m *customManageMenuModel) FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*ManageMenu, error) {
	sb := sqlbuilder.Select(m.withTableColumns(manageMenuFieldNames...)...).From(m.table)

	builder := condition.Select(*sb, conds...)
	builder.Limit(1)
	statement, args := builder.Build()

	var resp ManageMenu
	var err error

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customManageMenuModel) PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageMenu, int64, error) {
	sb := sqlbuilder.Select(m.withTableColumns(manageMenuFieldNames...)...).From(m.table)
	builder := condition.Select(*sb, conds...)

	var resp []*ManageMenu
	var err error

	statement, args := builder.Build()

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	total, err := m.CountByCondition(ctx, session, conds...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customManageMenuModel) UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	builder := condition.Update(*sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	builder.Set(assigns...)

	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *customManageMenuModel) DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	builder := condition.Delete(*sb, conds...)
	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}
