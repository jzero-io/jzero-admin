// Code generated by goctl. Templates Edited by jzero. DO NOT EDIT.

package manage_menu

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/eddieowens/opts"
	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero/core/stores/condition"
	"github.com/jzero-io/jzero/core/stores/modelx"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
)

var (
	manageMenuFieldNames        []string
	manageMenuRows              string
	manageMenuRowsExpectAutoSet string

	ManageMenuField = struct {
		Id              condition.Field
		CreateTime      condition.Field
		UpdateTime      condition.Field
		CreateBy        condition.Field
		UpdateBy        condition.Field
		Status          condition.Field
		ParentId        condition.Field
		MenuType        condition.Field
		MenuName        condition.Field
		HideInMenu      condition.Field
		ActiveMenu      condition.Field
		Order           condition.Field
		RouteName       condition.Field
		RoutePath       condition.Field
		Component       condition.Field
		Icon            condition.Field
		IconType        condition.Field
		I18nKey         condition.Field
		KeepAlive       condition.Field
		Href            condition.Field
		MultiTab        condition.Field
		FixedIndexInTab condition.Field
		Query           condition.Field
		Permissions     condition.Field
		Constant        condition.Field
		ButtonCode      condition.Field
	}{
		Id:              "id",
		CreateTime:      "create_time",
		UpdateTime:      "update_time",
		CreateBy:        "create_by",
		UpdateBy:        "update_by",
		Status:          "status",
		ParentId:        "parent_id",
		MenuType:        "menu_type",
		MenuName:        "menu_name",
		HideInMenu:      "hide_in_menu",
		ActiveMenu:      "active_menu",
		Order:           "order",
		RouteName:       "route_name",
		RoutePath:       "route_path",
		Component:       "component",
		Icon:            "icon",
		IconType:        "icon_type",
		I18nKey:         "i18n_key",
		KeepAlive:       "keep_alive",
		Href:            "href",
		MultiTab:        "multi_tab",
		FixedIndexInTab: "fixed_index_in_tab",
		Query:           "query",
		Permissions:     "permissions",
		Constant:        "constant",
		ButtonCode:      "button_code",
	}
)

// Deprecated use ManageMenuField instead
const (
	Id              condition.Field = "id"
	CreateTime      condition.Field = "create_time"
	UpdateTime      condition.Field = "update_time"
	CreateBy        condition.Field = "create_by"
	UpdateBy        condition.Field = "update_by"
	Status          condition.Field = "status"
	ParentId        condition.Field = "parent_id"
	MenuType        condition.Field = "menu_type"
	MenuName        condition.Field = "menu_name"
	HideInMenu      condition.Field = "hide_in_menu"
	ActiveMenu      condition.Field = "active_menu"
	Order           condition.Field = "order"
	RouteName       condition.Field = "route_name"
	RoutePath       condition.Field = "route_path"
	Component       condition.Field = "component"
	Icon            condition.Field = "icon"
	IconType        condition.Field = "icon_type"
	I18nKey         condition.Field = "i18n_key"
	KeepAlive       condition.Field = "keep_alive"
	Href            condition.Field = "href"
	MultiTab        condition.Field = "multi_tab"
	FixedIndexInTab condition.Field = "fixed_index_in_tab"
	Query           condition.Field = "query"
	Permissions     condition.Field = "permissions"
	Constant        condition.Field = "constant"
	ButtonCode      condition.Field = "button_code"
)

func initManageMenuVars(flavor sqlbuilder.Flavor) {
	manageMenuFieldNames = condition.RawFieldNamesWithFlavor(flavor, &ManageMenu{})
	manageMenuRows = strings.Join(manageMenuFieldNames, ",")
	manageMenuRowsExpectAutoSet = strings.Join(condition.RemoveIgnoreColumnsWithFlavor(flavor, manageMenuFieldNames, "`id`"), ",")
}

type (
	manageMenuModel interface {
		// Insert insert a new record into the database.
		// Deprecated: use InsertV2 instead.
		Insert(ctx context.Context, session sqlx.Session, data *ManageMenu) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*ManageMenu, error)
		Update(ctx context.Context, session sqlx.Session, data *ManageMenu) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error

		// custom interface generated by jzero
		WithTable(f func(table string) string) manageMenuModel
		InsertV2(ctx context.Context, session sqlx.Session, data *ManageMenu) error
		BulkInsert(ctx context.Context, session sqlx.Session, datas []*ManageMenu) error
		FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageMenu, error)
		FindSelectedColumnsByCondition(ctx context.Context, session sqlx.Session, columns []string, conds ...condition.Condition) ([]*ManageMenu, error)
		FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*ManageMenu, error)
		CountByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (int64, error)
		PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageMenu, int64, error)
		UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error
	}

	defaultManageMenuModel struct {
		cachedConn sqlc.CachedConn
		conn       sqlx.SqlConn
		flavor     sqlbuilder.Flavor
		table      string
	}

	ManageMenu struct {
		Id              int64     `db:"id"`
		CreateTime      time.Time `db:"create_time"`
		UpdateTime      time.Time `db:"update_time"`
		CreateBy        int64     `db:"create_by"`
		UpdateBy        int64     `db:"update_by"`
		Status          string    `db:"status"`
		ParentId        int64     `db:"parent_id"`
		MenuType        string    `db:"menu_type"`
		MenuName        string    `db:"menu_name"`
		HideInMenu      int64     `db:"hide_in_menu"`
		ActiveMenu      string    `db:"active_menu"`
		Order           int64     `db:"order"`
		RouteName       string    `db:"route_name"`
		RoutePath       string    `db:"route_path"`
		Component       string    `db:"component"`
		Icon            string    `db:"icon"`
		IconType        string    `db:"icon_type"`
		I18nKey         string    `db:"i18n_key"`
		KeepAlive       int64     `db:"keep_alive"`
		Href            string    `db:"href"`
		MultiTab        int64     `db:"multi_tab"`
		FixedIndexInTab int64     `db:"fixed_index_in_tab"`
		Query           string    `db:"query"`
		Permissions     string    `db:"permissions"`
		Constant        int64     `db:"constant"`
		ButtonCode      string    `db:"button_code"`
	}
)

func newManageMenuModel(conn sqlx.SqlConn, op ...opts.Opt[modelx.ModelOpts]) *defaultManageMenuModel {
	o := opts.DefaultApply(op...)
	var cachedConn sqlc.CachedConn
	if len(o.CacheConf) > 0 {
		cachedConn = sqlc.NewConn(conn, o.CacheConf, o.CacheOpts...)
	}
	if o.CachedConn != nil {
		cachedConn = *o.CachedConn
	}

	initManageMenuVars(o.Flavor)

	return &defaultManageMenuModel{
		cachedConn: cachedConn,
		conn:       conn,
		flavor:     o.Flavor,
		table:      condition.QuoteWithFlavor(o.Flavor, "`manage_menu`"),
	}
}

func (m *defaultManageMenuModel) clone() *defaultManageMenuModel {
	return &defaultManageMenuModel{
		cachedConn: m.cachedConn,
		conn:       m.conn,
		table:      m.table,
		flavor:     m.flavor,
	}
}

func (m *defaultManageMenuModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ(condition.QuoteWithFlavor(m.flavor, "`id`"), id))
	statement, args := sb.BuildWithFlavor(m.flavor)
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *defaultManageMenuModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*ManageMenu, error) {
	sb := sqlbuilder.Select(manageMenuRows).From(m.table)
	sb.Where(sb.EQ(condition.QuoteWithFlavor(m.flavor, "`id`"), id))
	sb.Limit(1)
	sql, args := sb.BuildWithFlavor(m.flavor)
	var resp ManageMenu
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManageMenuModel) Insert(ctx context.Context, session sqlx.Session, data *ManageMenu) (sql.Result, error) {
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(manageMenuRowsExpectAutoSet).
		Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode).BuildWithFlavor(m.flavor)
	if session != nil {
		return session.ExecCtx(ctx, statement, args...)
	}
	return m.conn.ExecCtx(ctx, statement, args...)
}

func (m *defaultManageMenuModel) InsertV2(ctx context.Context, session sqlx.Session, data *ManageMenu) error {
	var statement string
	var args []any
	if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
		statement, args = sqlbuilder.NewInsertBuilder().
			InsertInto(m.table).
			Cols(manageMenuRowsExpectAutoSet).
			Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode).Returning("id").BuildWithFlavor(m.flavor)
	} else {
		statement, args = sqlbuilder.NewInsertBuilder().
			InsertInto(m.table).
			Cols(manageMenuRowsExpectAutoSet).
			Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode).BuildWithFlavor(m.flavor)
	}
	var primaryKey int64
	var err error
	if session != nil {
		if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
			err = session.QueryRowCtx(ctx, &primaryKey, statement, args...)
			if err != nil {
				return err
			}
		} else {
			result, err := session.ExecCtx(ctx, statement, args...)
			if err != nil {
				return err
			}
			lastInsertId, err := result.LastInsertId()
			if err != nil {
				return err
			}
			primaryKey = int64(lastInsertId)
		}
	} else {
		if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
			err = m.conn.QueryRowCtx(ctx, &primaryKey, statement, args...)
		} else {
			result, err := m.conn.ExecCtx(ctx, statement, args...)
			if err != nil {
				return err
			}
			lastInsertId, err := result.LastInsertId()
			if err != nil {
				return err
			}
			primaryKey = int64(lastInsertId)
		}
	}
	data.Id = primaryKey
	return err
}

func (m *defaultManageMenuModel) Update(ctx context.Context, session sqlx.Session, data *ManageMenu) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(manageMenuRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		if condition.Unquote(s) == condition.Unquote("`id`") {
			continue
		}
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ(condition.QuoteWithFlavor(m.flavor, "`id`"), nil))
	statement, _ := sb.BuildWithFlavor(m.flavor)

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode, data.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode, data.Id)
	}
	return err
}

func (m *defaultManageMenuModel) withTableColumns(columns ...string) []string {
	var withTableColumns []string
	for _, col := range columns {
		if strings.Contains(col, ".") {
			withTableColumns = append(withTableColumns, condition.QuoteWithFlavor(m.flavor, col))
		} else {
			withTableColumns = append(withTableColumns, m.table+"."+condition.QuoteWithFlavor(m.flavor, col))
		}
	}
	return withTableColumns
}
func (m *customManageMenuModel) WithTable(f func(table string) string) manageMenuModel {
	mc := &customManageMenuModel{
		defaultManageMenuModel: m.clone(),
	}
	mc.table = condition.QuoteWithFlavor(m.flavor, f(m.table))
	return mc
}

func (m *customManageMenuModel) BulkInsert(ctx context.Context, session sqlx.Session, datas []*ManageMenu) error {
	if len(datas) == 0 {
		return nil
	}

	sb := sqlbuilder.InsertInto(m.table)
	sb.SetFlavor(m.flavor)
	sb.Cols(manageMenuRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.KeepAlive, data.Href, data.MultiTab, data.FixedIndexInTab, data.Query, data.Permissions, data.Constant, data.ButtonCode)
	}
	statement, args := sb.BuildWithFlavor(m.flavor)

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *customManageMenuModel) FindSelectedColumnsByCondition(ctx context.Context, session sqlx.Session, columns []string, conds ...condition.Condition) ([]*ManageMenu, error) {
	if len(columns) == 0 {
		columns = manageMenuFieldNames
	}
	sb := sqlbuilder.Select(m.withTableColumns(columns...)...).From(m.table)
	builder := condition.SelectWithFlavor(m.flavor, *sb, conds...)
	statement, args := builder.BuildWithFlavor(m.flavor)

	var resp []*ManageMenu
	var err error

	if session != nil {
		err = session.QueryRowsPartialCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsPartialCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customManageMenuModel) FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageMenu, error) {
	return m.FindSelectedColumnsByCondition(ctx, session, manageMenuFieldNames, conds...)
}

func (m *customManageMenuModel) CountByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (int64, error) {
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset && cond.Operator != condition.OrderBy {
			countConds = append(countConds, cond)
		}
	}
	countBuilder := condition.SelectWithFlavor(m.flavor, *countsb, countConds...)

	var (
		total int64
		err   error
	)
	statement, args := countBuilder.BuildWithFlavor(m.flavor)
	if session != nil {
		err = session.QueryRowCtx(ctx, &total, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &total, statement, args...)
	}
	if err != nil {
		return 0, err
	}
	return total, nil
}

func (m *customManageMenuModel) FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*ManageMenu, error) {
	sb := sqlbuilder.Select(m.withTableColumns(manageMenuFieldNames...)...).From(m.table)

	builder := condition.SelectWithFlavor(m.flavor, *sb, conds...)
	builder.Limit(1)
	statement, args := builder.BuildWithFlavor(m.flavor)

	var resp ManageMenu
	var err error

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customManageMenuModel) PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*ManageMenu, int64, error) {
	sb := sqlbuilder.Select(m.withTableColumns(manageMenuFieldNames...)...).From(m.table)
	builder := condition.SelectWithFlavor(m.flavor, *sb, conds...)

	var resp []*ManageMenu
	var err error

	statement, args := builder.BuildWithFlavor(m.flavor)

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	total, err := m.CountByCondition(ctx, session, conds...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customManageMenuModel) UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	builder := condition.UpdateWithFlavor(m.flavor, *sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	builder.Set(assigns...)

	statement, args := builder.BuildWithFlavor(m.flavor)

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *customManageMenuModel) DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	builder := condition.DeleteWithFlavor(m.flavor, *sb, conds...)
	statement, args := builder.BuildWithFlavor(m.flavor)

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}
