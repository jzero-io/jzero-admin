// Code generated by goctl. Templates Edited by jzero. DO NOT EDIT.

package casbin_rule

import (
	"context"
	"database/sql"
	"strings"

	"github.com/eddieowens/opts"
	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero/core/stores/condition"
	"github.com/jzero-io/jzero/core/stores/modelx"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
)

var (
	casbinRuleFieldNames        []string
	casbinRuleRows              string
	casbinRuleRowsExpectAutoSet string
)

const (
	Id    condition.Field = "id"
	PType condition.Field = "p_type"
	V0    condition.Field = "v0"
	V1    condition.Field = "v1"
	V2    condition.Field = "v2"
	V3    condition.Field = "v3"
	V4    condition.Field = "v4"
	V5    condition.Field = "v5"
)

func initCasbinRuleVars() {
	casbinRuleFieldNames = condition.RawFieldNames(&CasbinRule{})
	casbinRuleRows = strings.Join(casbinRuleFieldNames, ",")
	casbinRuleRowsExpectAutoSet = strings.Join(condition.RemoveIgnoreColumns(casbinRuleFieldNames, "`id`"), ",")
}

type (
	casbinRuleModel interface {
		// Insert insert a new record into the database.
		// Deprecated: use InsertV2 instead.
		Insert(ctx context.Context, session sqlx.Session, data *CasbinRule) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*CasbinRule, error)
		Update(ctx context.Context, session sqlx.Session, data *CasbinRule) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error

		// custom interface generated by jzero
		WithTable(f func(table string) string) casbinRuleModel
		InsertV2(ctx context.Context, session sqlx.Session, data *CasbinRule) error
		BulkInsert(ctx context.Context, session sqlx.Session, datas []*CasbinRule) error
		FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*CasbinRule, error)
		FindSelectedColumnsByCondition(ctx context.Context, session sqlx.Session, columns []string, conds ...condition.Condition) ([]*CasbinRule, error)
		FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*CasbinRule, error)
		CountByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (int64, error)
		PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*CasbinRule, int64, error)
		UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error
	}

	defaultCasbinRuleModel struct {
		cachedConn sqlc.CachedConn
		conn       sqlx.SqlConn
		table      string
	}

	CasbinRule struct {
		Id    int64          `db:"id"`
		PType sql.NullString `db:"p_type"`
		V0    sql.NullString `db:"v0"`
		V1    sql.NullString `db:"v1"`
		V2    sql.NullString `db:"v2"`
		V3    sql.NullString `db:"v3"`
		V4    sql.NullString `db:"v4"`
		V5    sql.NullString `db:"v5"`
	}
)

func newCasbinRuleModel(conn sqlx.SqlConn, op ...opts.Opt[modelx.ModelOpts]) *defaultCasbinRuleModel {
	o := opts.DefaultApply(op...)
	var cachedConn sqlc.CachedConn
	if len(o.CacheConf) > 0 {
		cachedConn = sqlc.NewConn(conn, o.CacheConf, o.CacheOpts...)
	}
	if o.CachedConn != nil {
		cachedConn = *o.CachedConn
	}

	initCasbinRuleVars()

	return &defaultCasbinRuleModel{
		cachedConn: cachedConn,
		conn:       conn,
		table:      condition.AdaptTable("`casbin_rule`"),
	}
}

func (m *defaultCasbinRuleModel) clone() *defaultCasbinRuleModel {
	return &defaultCasbinRuleModel{
		cachedConn: m.cachedConn,
		conn:       m.conn,
		table:      m.table,
	}
}

func (m *defaultCasbinRuleModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ(condition.AdaptField("`id`"), id))
	statement, args := sb.Build()
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *defaultCasbinRuleModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*CasbinRule, error) {
	sb := sqlbuilder.Select(casbinRuleRows).From(m.table)
	sb.Where(sb.EQ(condition.AdaptField("`id`"), id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp CasbinRule
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCasbinRuleModel) Insert(ctx context.Context, session sqlx.Session, data *CasbinRule) (sql.Result, error) {
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(casbinRuleRowsExpectAutoSet).
		Values(data.PType, data.V0, data.V1, data.V2, data.V3, data.V4, data.V5).Build()
	if session != nil {
		return session.ExecCtx(ctx, statement, args...)
	}
	return m.conn.ExecCtx(ctx, statement, args...)
}

func (m *defaultCasbinRuleModel) InsertV2(ctx context.Context, session sqlx.Session, data *CasbinRule) error {
	var statement string
	var args []any
	if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
		statement, args = sqlbuilder.NewInsertBuilder().
			InsertInto(m.table).
			Cols(casbinRuleRowsExpectAutoSet).
			Values(data.PType, data.V0, data.V1, data.V2, data.V3, data.V4, data.V5).Returning("id").Build()
	} else {
		statement, args = sqlbuilder.NewInsertBuilder().
			InsertInto(m.table).
			Cols(casbinRuleRowsExpectAutoSet).
			Values(data.PType, data.V0, data.V1, data.V2, data.V3, data.V4, data.V5).Build()
	}
	var primaryKey int64
	var err error
	if session != nil {
		if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
			err = session.QueryRowCtx(ctx, &primaryKey, statement, args...)
			if err != nil {
				return err
			}
		} else {
			result, err := session.ExecCtx(ctx, statement, args...)
			if err != nil {
				return err
			}
			lastInsertId, err := result.LastInsertId()
			if err != nil {
				return err
			}
			primaryKey = int64(lastInsertId)
		}
	} else {
		if sqlbuilder.DefaultFlavor == sqlbuilder.PostgreSQL || sqlbuilder.DefaultFlavor == sqlbuilder.SQLite {
			err = m.conn.QueryRowCtx(ctx, &primaryKey, statement, args...)
		} else {
			result, err := m.conn.ExecCtx(ctx, statement, args...)
			if err != nil {
				return err
			}
			lastInsertId, err := result.LastInsertId()
			if err != nil {
				return err
			}
			primaryKey = int64(lastInsertId)
		}
	}
	data.Id = primaryKey
	return err
}

func (m *defaultCasbinRuleModel) Update(ctx context.Context, session sqlx.Session, data *CasbinRule) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(casbinRuleRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		if condition.Unquote(s) == condition.Unquote("`id`") {
			continue
		}
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ(condition.AdaptField("`id`"), nil))
	statement, _ := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, data.PType, data.V0, data.V1, data.V2, data.V3, data.V4, data.V5, data.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, data.PType, data.V0, data.V1, data.V2, data.V3, data.V4, data.V5, data.Id)
	}
	return err
}

func (m *defaultCasbinRuleModel) withTableColumns(columns ...string) []string {
	var withTableColumns []string
	for _, col := range columns {
		if strings.Contains(col, ".") {
			withTableColumns = append(withTableColumns, condition.AdaptField(col))
		} else {
			withTableColumns = append(withTableColumns, m.table+"."+condition.AdaptField(col))
		}
	}
	return withTableColumns
}
func (m *customCasbinRuleModel) WithTable(f func(table string) string) casbinRuleModel {
	mc := &customCasbinRuleModel{
		defaultCasbinRuleModel: m.clone(),
	}
	mc.table = condition.AdaptTable(f(condition.Unquote(m.table)))
	return mc
}

func (m *customCasbinRuleModel) BulkInsert(ctx context.Context, session sqlx.Session, datas []*CasbinRule) error {
	if len(datas) == 0 {
		return nil
	}

	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(casbinRuleRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.PType, data.V0, data.V1, data.V2, data.V3, data.V4, data.V5)
	}
	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *customCasbinRuleModel) FindSelectedColumnsByCondition(ctx context.Context, session sqlx.Session, columns []string, conds ...condition.Condition) ([]*CasbinRule, error) {
	if len(columns) == 0 {
		columns = casbinRuleFieldNames
	}
	sb := sqlbuilder.Select(m.withTableColumns(columns...)...).From(m.table)
	builder := condition.Select(*sb, conds...)
	statement, args := builder.Build()

	var resp []*CasbinRule
	var err error

	if session != nil {
		err = session.QueryRowsPartialCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsPartialCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customCasbinRuleModel) FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*CasbinRule, error) {
	return m.FindSelectedColumnsByCondition(ctx, session, casbinRuleFieldNames, conds...)
}

func (m *customCasbinRuleModel) CountByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (int64, error) {
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset && cond.Operator != condition.OrderBy {
			countConds = append(countConds, cond)
		}
	}
	countBuilder := condition.Select(*countsb, countConds...)

	var (
		total int64
		err   error
	)
	statement, args := countBuilder.Build()
	if session != nil {
		err = session.QueryRowCtx(ctx, &total, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &total, statement, args...)
	}
	if err != nil {
		return 0, err
	}
	return total, nil
}

func (m *customCasbinRuleModel) FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*CasbinRule, error) {
	sb := sqlbuilder.Select(m.withTableColumns(casbinRuleFieldNames...)...).From(m.table)

	builder := condition.Select(*sb, conds...)
	builder.Limit(1)
	statement, args := builder.Build()

	var resp CasbinRule
	var err error

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customCasbinRuleModel) PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*CasbinRule, int64, error) {
	sb := sqlbuilder.Select(m.withTableColumns(casbinRuleFieldNames...)...).From(m.table)
	builder := condition.Select(*sb, conds...)

	var resp []*CasbinRule
	var err error

	statement, args := builder.Build()

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	total, err := m.CountByCondition(ctx, session, conds...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customCasbinRuleModel) UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	builder := condition.Update(*sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	builder.Set(assigns...)

	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *customCasbinRuleModel) DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	builder := condition.Delete(*sb, conds...)
	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}
