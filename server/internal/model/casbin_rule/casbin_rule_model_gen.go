// Code generated by goctl. DO NOT EDIT.

package casbin_rule

import (
	"context"
	"database/sql"
	"strings"

	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	casbinRuleFieldNames          = builder.RawFieldNames(&CasbinRule{})
	casbinRuleRows                = strings.Join(casbinRuleFieldNames, ",")
	casbinRuleRowsExpectAutoSet   = strings.Join(stringx.Remove(casbinRuleFieldNames, "`id`"), ",")
	casbinRuleRowsWithPlaceHolder = strings.Join(stringx.Remove(casbinRuleFieldNames, "`id`"), "=?,") + "=?"
)

type (
	casbinRuleModel interface {
		Insert(ctx context.Context, data *CasbinRule) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CasbinRule, error)
		Update(ctx context.Context, data *CasbinRule) error
		Delete(ctx context.Context, id int64) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, datas []*CasbinRule) error
		FindByCondition(ctx context.Context, conds ...condition.Condition) ([]*CasbinRule, error)
		FindOneByCondition(ctx context.Context, conds ...condition.Condition) (*CasbinRule, error)
		PageByCondition(ctx context.Context, conds ...condition.Condition) ([]*CasbinRule, int64, error)
		UpdateFieldsByCondition(ctx context.Context, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, conds ...condition.Condition) error
	}

	defaultCasbinRuleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CasbinRule struct {
		Id    int64          `db:"id"`
		Ptype sql.NullString `db:"ptype"`
		V0    sql.NullString `db:"v0"`
		V1    sql.NullString `db:"v1"`
		V2    sql.NullString `db:"v2"`
		V3    sql.NullString `db:"v3"`
		V4    sql.NullString `db:"v4"`
		V5    sql.NullString `db:"v5"`
	}
)

func newCasbinRuleModel(conn sqlx.SqlConn) *defaultCasbinRuleModel {
	return &defaultCasbinRuleModel{
		conn:  conn,
		table: "`casbin_rule`",
	}
}

func (m *defaultCasbinRuleModel) Delete(ctx context.Context, id int64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`id`", id))
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *defaultCasbinRuleModel) FindOne(ctx context.Context, id int64) (*CasbinRule, error) {
	sb := sqlbuilder.Select(casbinRuleRows).From(m.table)
	sb.Where(sb.EQ("`id`", id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp CasbinRule
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCasbinRuleModel) Insert(ctx context.Context, data *CasbinRule) (sql.Result, error) {
	sql, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(casbinRuleRowsExpectAutoSet).
		Values(data.Ptype, data.V0, data.V1, data.V2, data.V3, data.V4, data.V5).Build()
	ret, err := m.conn.ExecCtx(ctx, sql, args...)
	return ret, err
}

func (m *defaultCasbinRuleModel) Update(ctx context.Context, data *CasbinRule) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(casbinRuleRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`id`", nil))
	sql, _ := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, data.Ptype, data.V0, data.V1, data.V2, data.V3, data.V4, data.V5, data.Id)
	return err
}

func (m *defaultCasbinRuleModel) tableName() string {
	return m.table
}

func (m *customCasbinRuleModel) BulkInsert(ctx context.Context, datas []*CasbinRule) error {
	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(casbinRuleRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.Ptype, data.V0, data.V1, data.V2, data.V3, data.V4, data.V5)
	}
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *customCasbinRuleModel) FindByCondition(ctx context.Context, conds ...condition.Condition) ([]*CasbinRule, error) {
	sb := sqlbuilder.Select(casbinRuleFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	sql, args := sb.Build()

	var resp []*CasbinRule
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customCasbinRuleModel) FindOneByCondition(ctx context.Context, conds ...condition.Condition) (*CasbinRule, error) {
	sb := sqlbuilder.Select(casbinRuleFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	sb.Limit(1)
	sql, args := sb.Build()

	var resp CasbinRule
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customCasbinRuleModel) PageByCondition(ctx context.Context, conds ...condition.Condition) ([]*CasbinRule, int64, error) {
	sb := sqlbuilder.Select(casbinRuleFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	condition.ApplySelect(sb, conds...)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	condition.ApplySelect(countsb, countConds...)

	var resp []*CasbinRule

	sql, args := sb.Build()
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	var total int64
	sql, args = countsb.Build()
	err = m.conn.QueryRowCtx(ctx, &total, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customCasbinRuleModel) UpdateFieldsByCondition(ctx context.Context, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	condition.ApplyUpdate(sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	sb.Set(assigns...)

	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	if err != nil {
		return err
	}
	return nil
}

func (m *customCasbinRuleModel) DeleteByCondition(ctx context.Context, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	condition.ApplyDelete(sb, conds...)
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}
