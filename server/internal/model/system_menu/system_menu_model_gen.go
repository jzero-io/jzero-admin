// Code generated by goctl. DO NOT EDIT.

package system_menu

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemMenuFieldNames          = builder.RawFieldNames(&SystemMenu{})
	systemMenuRows                = strings.Join(systemMenuFieldNames, ",")
	systemMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(systemMenuFieldNames, "`id`"), ",")
	systemMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(systemMenuFieldNames, "`id`"), "=?,") + "=?"
)

type (
	systemMenuModel interface {
		Insert(ctx context.Context, data *SystemMenu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemMenu, error)
		Update(ctx context.Context, data *SystemMenu) error
		Delete(ctx context.Context, id int64) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, datas []*SystemMenu) error
		FindByCondition(ctx context.Context, conds ...condition.Condition) ([]*SystemMenu, error)
		FindOneByCondition(ctx context.Context, conds ...condition.Condition) (*SystemMenu, error)
		PageByCondition(ctx context.Context, conds ...condition.Condition) ([]*SystemMenu, int64, error)
		UpdateFieldsByCondition(ctx context.Context, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, conds ...condition.Condition) error
	}

	defaultSystemMenuModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SystemMenu struct {
		Id         int64          `db:"id"`
		CreateTime time.Time      `db:"create_time"`
		UpdateTime time.Time      `db:"update_time"`
		CreateBy   sql.NullInt64  `db:"create_by"`
		UpdateBy   sql.NullInt64  `db:"update_by"`
		Status     string         `db:"status"`
		ParentId   int64          `db:"parent_id"`
		MenuType   string         `db:"menu_type"`
		MenuName   string         `db:"menu_name"`
		HideInMenu int64          `db:"hide_in_menu"`
		ActiveMenu sql.NullString `db:"active_menu"`
		Order      int64          `db:"order"`
		RouteName  string         `db:"route_name"`
		RoutePath  string         `db:"route_path"`
		Component  string         `db:"component"`
		Icon       string         `db:"icon"`
		IconType   string         `db:"icon_type"`
		I18nKey    string         `db:"i18n_key"`
	}
)

func newSystemMenuModel(conn sqlx.SqlConn) *defaultSystemMenuModel {
	return &defaultSystemMenuModel{
		conn:  conn,
		table: "`system_menu`",
	}
}

func (m *defaultSystemMenuModel) Delete(ctx context.Context, id int64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`id`", id))
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *defaultSystemMenuModel) FindOne(ctx context.Context, id int64) (*SystemMenu, error) {
	sb := sqlbuilder.Select(systemMenuRows).From(m.table)
	sb.Where(sb.EQ("`id`", id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp SystemMenu
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemMenuModel) Insert(ctx context.Context, data *SystemMenu) (sql.Result, error) {
	sql, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(systemMenuRowsExpectAutoSet).
		Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey).Build()
	ret, err := m.conn.ExecCtx(ctx, sql, args...)
	return ret, err
}

func (m *defaultSystemMenuModel) Update(ctx context.Context, data *SystemMenu) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(systemMenuRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`id`", nil))
	sql, _ := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey, data.Id)
	return err
}

func (m *defaultSystemMenuModel) tableName() string {
	return m.table
}

func (m *customSystemMenuModel) BulkInsert(ctx context.Context, datas []*SystemMenu) error {
	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(systemMenuRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Status, data.ParentId, data.MenuType, data.MenuName, data.HideInMenu, data.ActiveMenu, data.Order, data.RouteName, data.RoutePath, data.Component, data.Icon, data.IconType, data.I18nKey)
	}
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *customSystemMenuModel) FindByCondition(ctx context.Context, conds ...condition.Condition) ([]*SystemMenu, error) {
	sb := sqlbuilder.Select(systemMenuFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	sql, args := sb.Build()

	var resp []*SystemMenu
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customSystemMenuModel) FindOneByCondition(ctx context.Context, conds ...condition.Condition) (*SystemMenu, error) {
	sb := sqlbuilder.Select(systemMenuFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	sb.Limit(1)
	sql, args := sb.Build()

	var resp SystemMenu
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customSystemMenuModel) PageByCondition(ctx context.Context, conds ...condition.Condition) ([]*SystemMenu, int64, error) {
	sb := sqlbuilder.Select(systemMenuFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	condition.ApplySelect(sb, conds...)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	condition.ApplySelect(countsb, countConds...)

	var resp []*SystemMenu

	sql, args := sb.Build()
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	var total int64
	sql, args = countsb.Build()
	err = m.conn.QueryRowCtx(ctx, &total, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customSystemMenuModel) UpdateFieldsByCondition(ctx context.Context, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	condition.ApplyUpdate(sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	sb.Set(assigns...)

	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	if err != nil {
		return err
	}
	return nil
}

func (m *customSystemMenuModel) DeleteByCondition(ctx context.Context, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	condition.ApplyDelete(sb, conds...)
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}
