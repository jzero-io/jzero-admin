// Code generated by goctl. DO NOT EDIT.

package system_user

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemUserFieldNames          = builder.RawFieldNames(&SystemUser{})
	systemUserRows                = strings.Join(systemUserFieldNames, ",")
	systemUserRowsExpectAutoSet   = strings.Join(stringx.Remove(systemUserFieldNames, "`id`"), ",")
	systemUserRowsWithPlaceHolder = strings.Join(stringx.Remove(systemUserFieldNames, "`id`"), "=?,") + "=?"
)

type (
	systemUserModel interface {
		Insert(ctx context.Context, data *SystemUser) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SystemUser, error)
		FindOneByUsername(ctx context.Context, username string) (*SystemUser, error)
		Update(ctx context.Context, data *SystemUser) error
		Delete(ctx context.Context, id uint64) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, datas []*SystemUser) error
		FindByCondition(ctx context.Context, conds ...condition.Condition) ([]*SystemUser, error)
		FindOneByCondition(ctx context.Context, conds ...condition.Condition) (*SystemUser, error)
		PageByCondition(ctx context.Context, conds ...condition.Condition) ([]*SystemUser, int64, error)
		UpdateFieldsByCondition(ctx context.Context, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, conds ...condition.Condition) error
	}

	defaultSystemUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SystemUser struct {
		Id         uint64        `db:"id"`
		CreateTime time.Time     `db:"create_time"`
		UpdateTime time.Time     `db:"update_time"`
		CreateBy   sql.NullInt64 `db:"create_by"`
		UpdateBy   sql.NullInt64 `db:"update_by"`
		Username   string        `db:"username"`
		Password   string        `db:"password"`
		Nickname   string        `db:"nickname"`
		Gender     string        `db:"gender"`
		Phone      string        `db:"phone"`
		Email      string        `db:"email"`
		Status     string        `db:"status"`
	}
)

func newSystemUserModel(conn sqlx.SqlConn) *defaultSystemUserModel {
	return &defaultSystemUserModel{
		conn:  conn,
		table: "`system_user`",
	}
}

func (m *defaultSystemUserModel) Delete(ctx context.Context, id uint64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`id`", id))
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *defaultSystemUserModel) FindOne(ctx context.Context, id uint64) (*SystemUser, error) {
	sb := sqlbuilder.Select(systemUserRows).From(m.table)
	sb.Where(sb.EQ("`id`", id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp SystemUser
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemUserModel) FindOneByUsername(ctx context.Context, username string) (*SystemUser, error) {
	var resp SystemUser
	sb := sqlbuilder.Select(systemUserRows).From(m.table)
	// patch
	sb.Where(sb.EQ(strings.Split(strings.ReplaceAll("`username` = ?", " ", ""), "=")[0], username))
	sb.Limit(1)

	sql, args := sb.Build()
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)

	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemUserModel) Insert(ctx context.Context, data *SystemUser) (sql.Result, error) {
	sql, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(systemUserRowsExpectAutoSet).
		Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Username, data.Password, data.Nickname, data.Gender, data.Phone, data.Email, data.Status).Build()
	ret, err := m.conn.ExecCtx(ctx, sql, args...)
	return ret, err
}

func (m *defaultSystemUserModel) Update(ctx context.Context, newData *SystemUser) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(systemUserRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`id`", nil))
	sql, _ := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, newData.CreateTime, newData.UpdateTime, newData.CreateBy, newData.UpdateBy, newData.Username, newData.Password, newData.Nickname, newData.Gender, newData.Phone, newData.Email, newData.Status, newData.Id)
	return err
}

func (m *defaultSystemUserModel) tableName() string {
	return m.table
}

func (m *customSystemUserModel) BulkInsert(ctx context.Context, datas []*SystemUser) error {
	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(systemUserRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.CreateTime, data.UpdateTime, data.CreateBy, data.UpdateBy, data.Username, data.Password, data.Nickname, data.Gender, data.Phone, data.Email, data.Status)
	}
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *customSystemUserModel) FindByCondition(ctx context.Context, conds ...condition.Condition) ([]*SystemUser, error) {
	sb := sqlbuilder.Select(systemUserFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	sql, args := sb.Build()

	var resp []*SystemUser
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customSystemUserModel) FindOneByCondition(ctx context.Context, conds ...condition.Condition) (*SystemUser, error) {
	sb := sqlbuilder.Select(systemUserFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	sb.Limit(1)
	sql, args := sb.Build()

	var resp SystemUser
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customSystemUserModel) PageByCondition(ctx context.Context, conds ...condition.Condition) ([]*SystemUser, int64, error) {
	sb := sqlbuilder.Select(systemUserFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	condition.ApplySelect(sb, conds...)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	condition.ApplySelect(countsb, countConds...)

	var resp []*SystemUser

	sql, args := sb.Build()
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	var total int64
	sql, args = countsb.Build()
	err = m.conn.QueryRowCtx(ctx, &total, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customSystemUserModel) UpdateFieldsByCondition(ctx context.Context, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	condition.ApplyUpdate(sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	sb.Set(assigns...)

	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	if err != nil {
		return err
	}
	return nil
}

func (m *customSystemUserModel) DeleteByCondition(ctx context.Context, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	condition.ApplyDelete(sb, conds...)
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}
