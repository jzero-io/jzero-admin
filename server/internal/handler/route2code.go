// Code generated by jzero. DO NOT EDIT.

package handler

import (
	"net/http"
	"path"
	"strings"
	"sync"

	"github.com/zeromicro/go-zero/core/logx"
	"github.com/zeromicro/go-zero/core/search"
)

var RoutesCodesMap = map[string]string{
	"POST:/api/v1/auth/code-login":          "auth:codeLogin",
	"POST:/api/v1/auth/error":               "auth:error",
	"GET:/api/v1/auth/getUserInfo":          "auth:getUserInfo",
	"POST:/api/v1/auth/pwd-login":           "auth:pwdLogin",
	"POST:/api/v1/auth/refreshToken":        "auth:refreshToken",
	"POST:/api/v1/auth/register":            "auth:register",
	"POST:/api/v1/auth/resetPassword":       "auth:resetPassword",
	"GET:/api/v1/auth/sendVerificationCode": "auth:sendVerificationCode",
	"POST:/api/v1/manage/addMenu":           "manage:menu:add",
	"POST:/api/v1/manage/deleteMenu":        "manage:menu:delete",
	"POST:/api/v1/manage/editMenu":          "manage:menu:edit",
	"GET:/api/v1/manage/getAllPages":        "manage:menu:getAllPages",
	"GET:/api/v1/manage/getMenuList":        "manage:menu:list",
	"GET:/api/v1/manage/getMenuTree":        "manage:menu:tree",
	"POST:/api/v1/manage/addRole":           "manage:role:add",
	"POST:/api/v1/manage/deleteRole":        "manage:role:delete",
	"POST:/api/v1/manage/editRole":          "manage:role:edit",
	"GET:/api/v1/manage/getAllRoles":        "manage:role:getAll",
	"GET:/api/v1/manage/getRoleHome":        "manage:role:getHome",
	"GET:/api/v1/manage/getRoleList":        "manage:role:list",
	"GET:/api/v1/manage/getRoleMenus":       "manage:role:getMenus",
	"POST:/api/v1/manage/setRoleMenus":      "manage:role:setMenus",
	"POST:/api/v1/manage/updateRoleHome":    "manage:role:updateHome",
	"POST:/api/v1/manage/addUser":           "manage:user:add",
	"POST:/api/v1/manage/deleteUser":        "manage:user:delete",
	"POST:/api/v1/manage/editUser":          "manage:user:edit",
	"GET:/api/v1/manage/getUserList":        "manage:user:list",
	"GET:/api/v1/route/getConstantRoutes":   "route:getConstantRoutes",
	"GET:/api/v1/route/getUserRoutes":       "route:getUserRoutes",
	"GET:/api/v1/route/isRouteExist":        "route:isRouteExist",
	"GET:/api/v1/version":                   "version:version",
}

var (
	MST  map[string]*search.Tree
	once sync.Once
)

func Route2Code(r *http.Request) string {
	once.Do(func() {
		RegisterRoute2Code(RoutesCodesMap)
	})
	if tree, ok := MST[strings.ToUpper(r.Method)]; ok {
		if result, ok := tree.Search(path.Clean(r.URL.Path)); ok {
			return result.Item.(string)
		}
	}

	return "unknown"
}

func RegisterRoute2Code(maps map[string]string) {
	if MST == nil {
		MST = make(map[string]*search.Tree)
	}
	for k, v := range maps {
		if splits := strings.Split(k, ":"); len(splits) >= 2 {
			if _, ok := MST[splits[0]]; ok {
				logx.Must(MST[splits[0]].Add(path.Clean(strings.Join(splits[1:], ":")), v))
			} else {
				tree := search.NewTree()
				logx.Must(tree.Add(strings.Join(splits[1:], ":"), v))
				MST[splits[0]] = tree
			}
		}
	}
}
