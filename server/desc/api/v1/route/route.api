syntax = "v1"

info (
	go_package: "route"
)

type Route {
	Id        int64       `json:"-"`
	ParentId  int64       `json:"-"`
	Name      string      `json:"name"`
	Path      string      `json:"path"`
	Meta      RouteMeta   `json:"meta"`
	Component string      `json:"component"`
	Props     interface{} `json:"props"`
	Redirect  string      `json:"redirect"`
	Children  []Route     `json:"children"`
}

type RouteMeta {
	Title           string  `json:"title"`
	I18nKey         string  `json:"i18nKey"`
	LocalIcon       string  `json:"localIcon"`
	Icon            string  `json:"icon"`
	Order           int     `json:"order"`
	HideInMenu      bool    `json:"hideInMenu"`
	ActiveMenu      string  `json:"activeMenu"`
	MultiTab        bool    `json:"multiTab"`
	FixedIndexInTab *int64  `json:"fixedIndexInTab"`
	KeepAlive       bool    `json:"keepAlive"`
	Constant        bool    `json:"constant"`
	Href            string  `json:"href"`
	Query           []Query `json:"query"`
}

type Query {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type GetConstantRoutesRequest {}

type GetConstantRoutesResponseItem {
	Name      string    `json:"name"`
	Path      string    `json:"path"`
	Component string    `json:"component"`
	Props     bool      `json:"props"`
	Meta      RouteMeta `json:"meta"`
}

type GetUserRoutesRequest {}

type GetUserRoutesResponse {
	Routes []Route `json:"routes"`
	Home   string  `json:"home"`
}

type IsRouteExistRequest {}

@server (
	prefix:          /api
	group:           route
	compact_handler: true
	jwt:             Jwt
)
service server {
	@handler GetUserRoutes
	get /route/getUserRoutes (GetUserRoutesRequest) returns (GetUserRoutesResponse)

	@handler IsRouteExist
	get /route/isRouteExist (IsRouteExistRequest) returns (bool)
}

@server (
	prefix:          /api
	group:           route
	compact_handler: true
)
service server {
	@handler GetConstantRoutes
	get /route/getConstantRoutes (GetConstantRoutesRequest) returns ([]GetConstantRoutesResponseItem)
}

