syntax = "v1"

info (
	go_package: "auth"
)

type LoginRequest {
	username string `json:"username,optional"`
	password string `json:"password,opitional"`
}

type LoginResponse {
	token        string `json:"token"`
	refreshToken string `json:"refreshToken"`
}

type RegisterRequest {
	email            string `json:"email"`
	verificationUuid string `json:"verificationUuid"`
	verificationCode string `json:"verificationCode"`
	username         string `json:"username"`
	password         string `json:"password"`
}

type RegisterResponse {}

type GetUserInfoRequest {}

type GetUserInfoResponse {
	userId   string   `json:"userId"`
	username string   `json:"username"`
	roles    []string `json:"roles"`
	buttons  []string `json:"buttons"`
}

type RefreshTokenRequest {}

type RefreshTokenResponse {}

type ErrorRequest {}

type ErrorResponse {}

type SendVerificationCodeRequest {
	email            string `form:"email" validate:"email"`
	verificationType string `form:"verificationType,option=email|phone"`
}

type SendVerificationCodeResponse {
	verificationUuid string `json:"verificationUuid"`
}

@server (
	group: auth
)
service server {
	@handler Login
	post /auth/login (LoginRequest) returns (LoginResponse)

	@handler SendVerificationCode
	get /auth/sendVerificationCode (SendVerificationCodeRequest) returns (SendVerificationCodeResponse)

	@handler Register
	post /auth/register (RegisterRequest) returns (RegisterResponse)

	@handler RefreshToken
	post /auth/refreshToken (RefreshTokenRequest) returns (RefreshTokenResponse)
}

@server (
	group: auth
	jwt:   Jwt
)
service server {
	@handler GetUserInfo
	get /auth/getUserInfo (GetUserInfoRequest) returns (GetUserInfoResponse)

	@handler Error
	post /auth/error (ErrorRequest) returns (ErrorResponse)
}

